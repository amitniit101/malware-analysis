import pandas as pd

# Load the filtered groups data
filtered_groups_file = 'filtered_groups.xlsx'
filtered_groups_df = pd.read_excel(filtered_groups_file)

# Load the employee data
employee_file = 'employee.xlsx'
employee_df = pd.read_excel(employee_file)

# Merge the two dataframes based on Employee No
merged_df = filtered_groups_df.merge(employee_df, left_on='ExtensionAttribute8', right_on='Employee No', how='left', suffixes=('', '_8'))
merged_df = merged_df.merge(employee_df, left_on='ExtensionAttribute10', right_on='Employee No', how='left', suffixes=('', '_10'))

# Define a function to get status and manager no, defaulting to '-' if not found
def get_status_manager_no(row, col_prefix):
    status_col = f'Active Status_{col_prefix}'
    manager_no_col = f'Manager Employee Id_{col_prefix}'
    
    status = row[status_col] if not pd.isna(row[status_col]) else '-'
    manager_no = row[manager_no_col] if not pd.isna(row[manager_no_col]) else '-'
    
    return status, manager_no

# Create new columns in filtered_groups_df for ExtensionAttribute8 and ExtensionAttribute10
filtered_groups_df['ExtensionAttribute8 Status'], filtered_groups_df['ExtensionAttribute8 Manager No'] = zip(*merged_df.apply(lambda row: get_status_manager_no(row, '8'), axis=1))
filtered_groups_df['ExtensionAttribute10 Status'], filtered_groups_df['ExtensionAttribute10 Manager No'] = zip(*merged_df.apply(lambda row: get_status_manager_no(row, '10'), axis=1))

# Define a function to get the manager's status and manager's manager no, defaulting to '-' if not found
def get_manager_status_manager_no(row, col_prefix):
    manager_no_col = f'ExtensionAttribute{col_prefix} Manager No'
    manager_status_col = f'ExtensionAttribute{col_prefix} Manager Status'
    
    manager_no = row[manager_no_col] if not pd.isna(row[manager_no_col]) else '-'
    
    # Find manager's status based on manager_no in employee_df
    manager_status = '-'
    if manager_no != '-':
        manager_row = employee_df[employee_df['Employee No'] == manager_no]
        if not manager_row.empty:
            manager_status = manager_row.iloc[0]['Active Status']
    
    return manager_status, manager_no

# Create new columns in filtered_groups_df for ExtensionAttribute8 Manager and ExtensionAttribute10 Manager
filtered_groups_df['ExtensionAttribute8 Manager Status'], filtered_groups_df['ExtensionAttribute8 Manager Manager No'] = zip(*filtered_groups_df.apply(lambda row: get_manager_status_manager_no(row, '8'), axis=1))
filtered_groups_df['ExtensionAttribute10 Manager Status'], filtered_groups_df['ExtensionAttribute10 Manager Manager No'] = zip(*filtered_groups_df.apply(lambda row: get_manager_status_manager_no(row, '10'), axis=1))

# Save the updated filtered groups data
filtered_groups_with_employee_data_file = 'filtered_groups_with_employee_data.xlsx'
filtered_groups_df.to_excel(filtered_groups_with_employee_data_file, index=False, engine='openpyxl')

print(f'Filtered groups data with employee and manager details saved to {filtered_groups_with_employee_data_file}')
