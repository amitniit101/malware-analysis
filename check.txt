# Function to perform actions and update ActionPerformed column
function PerformAction {
    param (
        [string]$ActionItemStatus,
        [string]$extensionAttribute8,
        [string]$extensionAttribute10,
        [string]$new_extensionAttribute8,
        [string]$new_extensionAttribute10,
        [string]$cnGroupName
    )
    
    try {
        if ($ActionItemStatus -eq "EA8 is Priv. EA10's manager set as new owner") {
            # Perform action 1
            Set-ADGroup -Identity $cnGroupName -Replace @{extensionAttribute10 = $new_extensionAttribute10}
            # Update Note section
            $note = "EA8 = $extensionAttribute8, EA4 = extensionAttribute4, EA5 = extensionAttribute5`nPrimary owner : $((Get-ADUser -Identity $new_extensionAttribute10 -Properties Description).Description)`nBackup owner : NA`nTermed owner's manager set as new owner, Botruntoday'date(ex: Botrunmmddyyyy)"
        }
        elseif ($ActionItemStatus -eq "Removed terminated backup owner") {
            # Perform action 2
            Set-ADGroup -Identity $cnGroupName -Replace @{extensionAttribute10 = ""}
            # Update Note section
            $note = "EA8 = $extensionAttribute8, EA4 = extensionAttribute4, EA5 = extensionAttribute5`nPrimary owner : $((Get-ADUser -Identity $extensionAttribute8 -Properties Description).Description)`nBackup owner : NA`nRemoved terminated backup owner, Botruntoday'date(ex: Botrunmmddyyyy)"
        }
        elseif ($ActionItemStatus -eq "Updated Backup owner as primary") {
            # Perform action 3
            Set-ADGroup -Identity $cnGroupName -Replace @{extensionAttribute10 = ""; extensionAttribute8 = $new_extensionAttribute8}
            # Update Note section
            $note = "EA8 = $new_extensionAttribute8, EA4 = extensionAttribute4, EA5 = extensionAttribute5`nPrimary owner : $((Get-ADUser -Identity $new_extensionAttribute8 -Properties Description).Description)`nBackup owner : NA`nRemoved terminated backup owner, Botruntoday'date(ex: Botrunmmddyyyy)"
        }
        else {
            # No action required
            $note = ""
        }
        
        return "Success", $note
    }
    catch {
        return "Exception Occurred", $_.Exception.Message
    }
}

# Load the CSV
$csvData = Import-Csv -Path "YourCSVFile.csv"

# Iterate through each row in the CSV
foreach ($row in $csvData) {
    $actionPerformed, $note = PerformAction -ActionItemStatus $row.ActionItemStatus -extensionAttribute8 $row.extensionAttribute8 -extensionAttribute10 $row.extensionAttribute10 -new_extensionAttribute8 $row.new_extensionAttribute8 -new_extensionAttribute10 $row.new_extensionAttribute10 -cnGroupName $row.'cn(group name)'
    
    # Update the ActionPerformed and Note columns in the CSV
    $row.ActionPerformed = $actionPerformed
    $row.Note = $note
}

# Export the updated CSV
$csvData | Export-Csv -Path "YourCSVFile.csv" -NoTypeInformation
